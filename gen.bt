// Copyright (c) 2023-present Lukas Neubert.
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package main

struct Gen {
mut:
	table Table
	out string
}

fun generate(ast Package, table Table) string {
	mut g := Gen{
		table = table
	}
	g.writeln('// Code generated by dts-wrap.')
	g.writeln('package ${ast.name}\n')
	g.decls(ast.decls)
	return g.out
}

fun (mut g Gen) decls(decls []Decl) {
	for decl in decls {
		if decl is Const {
			g.const_decl(decl as Const)
		} else if decl is Interface {
			g.interface_decl(decl as Interface)
		} else {
			eprintln('unsupported decl: ${decl}')
		}
	}
}

fun (mut g Gen) const_decl(node Const) {
	g.writeln('const #JS.${node.name} := ${g.typ(node.typ)}')
}

fun (mut g Gen) interface_decl(node Interface) {
	g.writeln('interface #JS.${node.name} {')
	for field in node.fields {
		g.write('\t')
		g.field(field)
		g.writeln('')
	}
	for method in node.methods {
		g.write('\t${method.name}(')
		for i, param in method.params {
			g.field(param)
			if i < method.params.length - 1 {
				g.write(', ')
			}
		}
		if method.ret_type == VOID_IDX {
			g.writeln(')')
		} else {
			g.writeln(') ${g.typ(method.ret_type)}')
		}
	}
	g.writeln('}')
}

fun (mut g Gen) field(field Field) {
	g.write(field.name)
	g.write(' ')
	g.write(g.typ(field.typ))
}

fun (mut g Gen) typ(typ i32) string {
	return g.table.type_str(typ)
}

fun (mut g Gen) write (s string){
	g.out += s
}

fun (mut g Gen) writeln (s string){
	g.out += s + "\n"
}
