// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

type Type := Primitive | ArrayType | NamedType | SumType

enum PrimitiveKind {
	unknown
	any
	void
	bool
	number
	string
	symbol
}

struct Primitive {
	kind PrimitiveKind
}

struct ArrayType {
	elem Type
}

struct NamedType {
	name string
}

struct SumType {
	variants []Type
}

fun (t Type) name() string {
	return match t {
		Primitive { t.name() }
		ArrayType { '#JS.Array' }
		NamedType { t.name }
		SumType { '#JS.Any' } // TODO proper sum types
	}
}

fun (t Primitive) name() string {
	return match t.kind {
		.any { '#JS.Any' }
		.void { '' }
		.bool { '#JS.Boolean' }
		.number { '#JS.Number' }
		.string { '#JS.String' }
		.symbol { '#JS.Any' }
		else { '' }
	}
}


fun type_from_string(s string) Type {
	kind := match s {
		'any' { PrimitiveKind.any }
		'void' { .void }
		'boolean' { .bool }
		'number' { .number }
		'string' { .string }
		'symbol' { .symbol }
		else { .unknown }
	}

	if kind != .unknown {
		return Primitive {
			kind = kind
		}
	}

	return NamedType{
		name = '#JS.' + s
	}
}
