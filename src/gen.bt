// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

fun generate(mod Module, table Table) string {
	mut g := Gen{
		table = table
	}
	return g.gen(mod)
}

struct Gen {
mut:
	table Table
	mod_name string
	out string
}

fun (mut g Gen) gen(mod Module) string {
	g.writeln('package ' + mod.name + '\n')
	g.writeln("import '${mod.name}' as #JS.${mod.name}\n")

	g.mod_name = '#JS.' + mod.name
	g.decls(mod.decls)

	return g.out
}

fun (mut g Gen) decls(decls []Decl) {
	for decl in decls {
		g.decl(decl)
	}
}

fun (mut g Gen) decl(decl Decl) {
	match decl {
		Const {
			g.const_decl(decl)
		}
		Interface {
			g.interface_decl(decl)
		}
		else {
			panic('cannot gen ${decl}')
		}
	}
}

fun (mut g Gen) const_decl(decl Const) {
	g.writeln('pub const ${g.mod_name}.${decl.name} := ${g.typ(decl.typ)}\n')
}

fun (mut g Gen) interface_decl(decl Interface) {
	g.writeln('pub interface ${g.mod_name}.${decl.name}{')
	// g.out += 'pub:\n'
	g.fields(decl.fields)
	g.writeln('}\n')
}

fun (mut g Gen) fields(fields []Field) {
	for field in fields {
		g.field(field)
	}
}

fun (mut g Gen) field(field Field) {
	// TODO
}

fun (mut g Gen) typ(typ i32) string {
	return g.table.syms[typ].name
}

fun (mut g Gen) write (s string){
	g.out += s
}

fun (mut g Gen) writeln (s string){
	g.out += s + "\n"
}
