// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

fun generate(ast File) string {
	mut g := Gen{}
	return g.gen(ast)
}

struct Gen {
mut:
	mod_name string := '#JS'
	out string
}

fun (mut g Gen) gen(ast File) string {
	g.writeln('package ' + ast.name + '\n')
	if ast.name != 'builtin' {
		g.writeln("import '${ast.name}' as #JS.${ast.name}\n")
	}

	g.decls(ast.decls)

	return g.out
}

fun (mut g Gen) decls(decls []Decl) {
	for decl in decls {
		g.decl(decl)
	}
}

fun (mut g Gen) decl(decl Decl) {
	match decl {
		Const { g.const_decl(decl) }
		Function { g.function_decl(decl) }
		Interface { g.interface_decl(decl) }
		Module { g.module_decl(decl) }
		TypeDecl { g.type_decl(decl) }
		else { panic('cannot gen ${decl}') }
	}
}

fun (mut g Gen) const_decl(decl Const) {
	g.writeln('pub const ${g.mod_name}.${decl.name} := ${decl.typ.name()}\n')
}

fun (mut g Gen) fields(fields []Field) {
	for field in fields {
		g.field(field)
	}
}

fun (mut g Gen) field(field Field) {
	g.write('\t')
	g.write(field.name)
	g.write(' ')
	g.writeln(field.typ.name())
}

fun (mut g Gen) function_decl(decl Function) {
	g.write('pub fun ${g.mod_name}.${decl.name}(')
	g.params(decl.params)
	g.write(') ')
	g.writeln(decl.return_type.name())
	g.writeln('')
}

fun (mut g Gen) params(params []Field) {
	for i, param in params {
		g.write(param.name)
		g.write(' ')
		g.write(param.typ.name())
		if i < params.length - 1 {
			g.write(', ')
		}
	}
}

fun (mut g Gen) interface_decl(decl Interface) {
	g.writeln('pub interface ${g.mod_name}.${decl.name}{')
	g.out += 'global:\n'
	g.fields(decl.fields)
	for method in decl.methods {
		g.write('\t')
		g.write(method.name)
		g.write('(')
		g.params(method.params)
		g.write(') ') // TODO fix extra space for void type
		g.writeln(method.return_type.name())
	}
	g.writeln('}\n')
}

fun (mut g Gen) module_decl(mod Module) {
	g.mod_name = '#JS.' + mod.name
	g.decls(mod.decls)
	g.mod_name = '#JS'
}

fun (mut g Gen) type_decl(decl TypeDecl) {
	g.writeln('pub type ${g.mod_name}.${decl.name} := ${decl.typ.name()}\n')
}

fun (mut g Gen) write (s string){
	g.out += s
}

fun (mut g Gen) writeln (s string){
	g.out += s + "\n"
}
