// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

struct Tokenizer {
mut:
	text string
	line_offsets []i32
	pos i32
	start i32
	lit string
}

fun (mut t Tokenizer) init(text string) {
	t.text = text
	t.line_offsets = [0]
}

fun (t Tokenizer) get_line() i32 {
	return t.line_offsets.length
}

fun (mut t Tokenizer) next() TokenKind {
	t.skip_whitespace()
	if t.pos >= t.text.length {
		return .eof
	}

	c := t.text[t.pos]
	t.pos += 1

	if c == `/` {
		c2 := t.text[t.pos]
		if c2 == `/` {
			t.skip_line()
			return t.next()
		}
		if c2 == `*` {
			t.skip_block()
			return t.next()
		}
	} else if is_name_char(c) {
		return t.name_or_key()
	}

	return match c {
		`'` { t.string_literal() }
		`(` { .lpar }
		`)` { .rpar}
		`[` { .lsqr }
		`]` { .rsqr }
		`{` { .lcur }
		`}` { .rcur }
		`:` { .colon }
		`;` { .semi }
		`?` { .question }
		else { t.unknown() }
	}
}

fun (mut t Tokenizer) name_or_key() TokenKind {
	t.start = t.pos - 1
	for t.pos < t.text.length {
		if is_name_char(t.text[t.pos]) {
			t.pos += 1
		} else {
			break
		}
	}
	t.lit = t.text.substr(t.start, t.pos)
	kind := tok_from_string(t.lit)
	return kind
}

fun (mut t Tokenizer) string_literal() TokenKind {
	t.start = t.pos
	for t.pos < t.text.length and t.text[t.pos] != `'` {
		t.pos += 1
	}
	t.lit = t.text.substr(t.start, t.pos)
	t.pos += 1
	return .string
}

fun (mut t Tokenizer) skip_line() {
	for t.pos < t.text.length and t.text[t.pos] != `\n` {
		t.pos += 1
	}
	t.pos += 1
	t.line_offsets.push(t.pos)
}

fun (mut t Tokenizer) skip_block() {
	for t.pos < t.text.length {
		c := t.text[t.pos]
		if c == `\n` {
			t.pos += 1
			t.line_offsets.push(t.pos)
		} else if c == `*` and t.text[t.pos + 1] == `/` {
			t.pos += 2
			break
		} else {
			t.pos += 1
		}
	}
}

fun (mut t Tokenizer) skip_whitespace() {
	for t.pos < t.text.length {
		c := t.text[t.pos]
		if c == `\n` {
			t.pos += 1
			t.line_offsets.push(t.pos)
		} else if c == ` ` or c == `\t` {
			t.pos += 1
		} else {
			break
		}
	}
}

fun (mut t Tokenizer) unknown() TokenKind {
	t.lit = t.text[t.pos - 1].ascii()
	return .unknown
}

fun is_name_char(c u8) bool {
	return (c >= `a` and c <= `z`) or (c >= `A` and c <= `Z`)
}
