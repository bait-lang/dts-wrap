// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

fun parse(text string) File {
	mut p := Parser{}
	p.init(text)
	return p.parse()
}

struct Parser {
mut:
	lexer Lexer
	tok Token
	next_tok Token
	val string
}

fun (mut p Parser) init(text string) {
	p.lexer = Lexer{}
	p.lexer.init(text)
}

fun (mut p Parser) parse() File {
	p.next()

	decls := p.decls()

	return File{
		name = 'builtin'
		decls = decls
	}
}

fun (mut p Parser) decls() []Decl {
	mut decls := []Decl
	for p.tok != .rcur and p.tok != .eof {
		p.skip(.key_declare)
		decls.push(p.decl())
	}
	return decls
}

fun (mut p Parser) decl() Decl {
	p.skip(.key_export)
	return match p.tok {
		.key_const { p.const_decl() }
		.key_function { p.function_decl() }
		.key_interface { p.interface_decl() }
		.key_module { p.module_decl() }
		.key_type { p.type_decl() }
		.key_var { p.const_decl() }
		else { p.error("unexpected token ${p.tok}, ${p.val}") }
	}
}

fun (mut p Parser) const_decl() Const {
	p.next()
	name := p.check_name()
	p.check(.colon)
	typ := p.parse_type()
	p.check(.semi)
	return Const{
		name = name
		typ = typ
	}
}

fun (mut p Parser) field() Field {
	name := p.check_name()
	p.skip(.question) // TODO handle optional fields
	return p.field_from_name(name)
}

fun (mut p Parser) field_from_name(name string) Field {
	p.check(.colon)
	typ := p.parse_type()
	return Field{
		name = name
		typ = typ
	}
}

fun (mut p Parser) function_decl() Function {
	p.skip(.key_function)
	name := p.check_name()
	return p.function_from_name(name)
}

fun (mut p Parser) function_from_name(name string) Function {
	p.check(.lpar)
	mut params := []Field
	for p.tok != .rpar {
		params.push(p.field())
		if p.tok == .comma {
			p.next()
		}
	}
	p.check(.rpar)
	p.check(.colon)
	typ := p.parse_type()
	p.check(.semi)
	return Function{
		name = name
		params = params
		return_type = typ
	}
}

fun (mut p Parser) interface_decl() Interface {
	p.next()
	name := p.check_name()
	p.check(.lcur)
	mut fields := []Field
	mut methods := []Function
	for p.tok != .rcur {
		// TODO handle modifiers
		// TODO can methods be readonly?
		p.skip(.key_readonly)
		fname := p.check_name()
		p.skip(.question) // TODO handle optional fields and methods

		if p.tok == .lpar {
			methods.push(p.function_from_name(fname))
		} else {
			fields.push(p.field_from_name(fname))
			p.check(.semi)
		}
	}
	p.check(.rcur)
	return Interface{
		name = name
		fields = fields
		methods = methods
	}
}

fun (mut p Parser) module_decl() Module {
	p.check(.key_module)
	name := p.val
	p.check(.string)
	p.check(.lcur)
	decls := p.decls()
	p.check(.rcur)
	return Module{
		name = name
		decls = decls
	}
}

fun (mut p Parser) type_decl() TypeDecl {
	p.next()
	name := p.check_name()
	p.check(.assign)
	typ := p.parse_type()
	p.check(.semi)
	return TypeDecl{
		name = name
		typ = typ
	}
}

fun (mut p Parser) parse_type() Type {
	name := p.check_name()

	if p.tok == .lsqr {
		p.next()
		p.check(.rsqr)
		return ArrayType {
			elem = p.type_from_name(name)
		}
	}

	typ := p.type_from_name(name)

	if p.tok != .pipe {
		return typ
	}

	mut variants := [typ as Type]
	for p.tok == .pipe {
		p.next()
		variants.push(p.parse_type())
	}
	return SumType {
		variants = variants
	}
}

fun (mut p Parser) type_from_name(name string) Primitive {
	mut kind := PrimitiveKind.unknown
	match name {
		'any' { kind = .any }
		'void' { kind = .void }
		'boolean' { kind = .bool }
		'number' { kind = .number }
		'string' { kind = .string }
		'symbol' { kind = .symbol }
		else { panic('unknown type ${name}') }
	}
	return Primitive {
		kind = kind
	}
}

fun (mut p Parser) skip(tok Token) {
	if p.tok == tok {
		p.next()
	}
}

fun (mut p Parser) check(tok Token) {
	if p.tok != tok {
		if p.tok == .unknown or p.tok == .name {
			p.error("got ${p.tok} (${p.val}), expected ${tok}")
		} else {
			p.error("got ${p.tok}, expected ${tok}")
		}
	}
	p.next()
}

fun (mut p Parser) check_name() string {
	name := p.val
	p.check(.name)
	return name
}

fun (mut p Parser) next() {
	if p.next_tok == .unknown {
		p.tok = p.lexer.next()
	} else {
		p.tok = p.next_tok
		p.next_tok = .unknown
	}
	p.val = p.lexer.val
}

fun (mut p Parser) peek() Token {
	if p.next_tok == .unknown {
		p.next_tok = p.lexer.next()
	}
	return p.next_tok
}

@noreturn
fun (p Parser) error(msg string) {
	l := p.lexer.get_line()
	eprintln('line ${l}: ${msg}')
	exit(1)
}
